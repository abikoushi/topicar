// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// topic_ar
List topic_ar(arma::sp_mat X, double sigma, int L, int n_p, int iter, double lr, std::string actfun);
RcppExport SEXP _topicar_topic_ar(SEXP XSEXP, SEXP sigmaSEXP, SEXP LSEXP, SEXP n_pSEXP, SEXP iterSEXP, SEXP lrSEXP, SEXP actfunSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::sp_mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< int >::type L(LSEXP);
    Rcpp::traits::input_parameter< int >::type n_p(n_pSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< double >::type lr(lrSEXP);
    Rcpp::traits::input_parameter< std::string >::type actfun(actfunSEXP);
    rcpp_result_gen = Rcpp::wrap(topic_ar(X, sigma, L, n_p, iter, lr, actfun));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_topicar_topic_ar", (DL_FUNC) &_topicar_topic_ar, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_topicar(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
